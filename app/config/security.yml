security:
# el firewall protege partes enteras de la aplicación (urls)
# en pattern iría la url o REGEX
# en este caso (frontend)la REGEX indica que todas las urls de la app están protegidas por él, es decir, 
# cualquier usuario que quiera acceder a la app tiene que estar loggeado pero la opción annonymous permite el acceso a usuarios anónimos
# la opción form_login indica cómo se tienen que loggear. Otras opciones: http_basic (típica caja de usuario/contraseña), http_digest (típica caja de usuario/contraseña), x509. Todos estos excepto form_login exigen la opción provider
    

    firewalls:
    
    # Firewall para el backend
        backend:
            pattern:    ^/backend
            provider:   administradores
            http_basic: ~
    

     # Firewall de la extranet a la que se conectan las tiendas
        extranet:
            pattern:        ^/extranet
            provider:       tiendas
            anonymous:      ~
            form_login:
                login_path: /extranet/login
                check_path: /extranet/login_check
            logout:
                path:       /extranet/logout
                target:     /extranet           
    
    # Firewall global utilizado en la parte pública o frontend    
    # OJO: el firewall del frontend tiene que ir después del de la extranet porque si no, sigue el pattern ^/* y al coincidir se salta el de la extranet y te genera una redirección a usuario_login si sigues la ruta http://localhost/Cupon/web/app_dev.php/extranet
        frontend:
            pattern:    ^/*
            provider:    usuarios
            anonymous:    ~
            form_login: 
                login_path: usuario_login
                check_path: usuario_login_check
            logout:
                path: usuario_logout   
            remember_me:
                key:    cupon1234
                lifetime: 3600
            switch_user: true               
                    
        
    access_control:
# indica que tipo de usuario puede acceder a cada url 
# login y registro se marcan como IS_AUTENTICATED_ANONYMOUSLY para que se pueda acceder a ellos como usuario anónimo
# el resto de path .../usuario/... sólo se podrá acceder si se está autenticado
# el orden aquí es importante, el último path/roles que hay que poner es { path: ^/usuario/*, roles: ROLE_USUARIO }, es decir, las excepciones siempre van antes
        - { path: ^/(es|en)/usuario/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/(es|en)/usuario/registro, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/(es|en)/usuario/*, roles: ROLE_USUARIO }
        - { path: ^/extranet/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/extranet/*, roles: ROLE_TIENDA }
        
    providers:
# los proveedores son los encargados de crear los usuarios de la aplicación
# hay 2 tipos de proveedores: memory (los usuarios se crean en memoria con los datos incluidos en el propio archivo security.yml)
# y los entity que se crean a partir de objetos doctrine
# se pueden definir varios proveedores, ej: para usuarios y tiendas y encadenarlos en un superproveedor 

     # Usuarios del backend
        administradores:
            memory:
                users:
                    - { name: admin, password: 1234, roles: ROLE_ADMIN } 
     # Usuarios del frontend
        usuarios:
            entity: { class: Cupon\UsuarioBundle\Entity\Usuario, property: email }
     # Usuarios de la extranet
        tiendas:
            entity: { class: Cupon\TiendaBundle\Entity\Tienda, property: login }       
            
    encoders:
# configura como se codifican las contraseñas (plaintext, sha512)
# en iterations marcamos el número de veces que se codifica. Si no ponemos nada será igual a 5000 veces y tarda mucho en hacerlo    
        Symfony\Component\Security\Core\User\User: plaintext  #backend
        Cupon\UsuarioBundle\Entity\Usuario:        { algorithm: sha512, iterations: 10 }
        Cupon\TiendaBundle\Entity\Tienda:          { algorithm: sha512, iterations: 10 }

# cambiamos el modo de decisión de los voters de affirmative (con que un solo voter diga que si, se autoriza) a
# unanimous (todos los voters tienen que decir si apra que se autorice)
    access_decision_manager:
         strategy: unanimous     
         
# con la opción role_hierarchy indicamos que cualquier usuario con role admin tiene también roles de usuario y de tienda
    role_hierarchy:
        ROLE_ADMIN: [ROLE_TIENDA, ROLE_USUARIO]         
             

